use bevy::prelude::Vec3;
use std::ops::RangeInclusive;

pub const BALL_DIAMETER: f32 = 0.08;
pub const BALL_HEIGHT: f32 = 0.05;
pub const BALL_RADIUS: f32 = 0.5 * BALL_DIAMETER;
pub const BALL_SPAWN_DELAY_IN_SECONDS: f32 = 1.0;

pub const FIELD_CENTER_POINT: Vec3 = Vec3::ZERO;
pub const BALL_SPAWNER_POSITION: Vec3 = Vec3::new(
    FIELD_CENTER_POINT.x,
    FIELD_CENTER_POINT.y + BALL_HEIGHT,
    FIELD_CENTER_POINT.z,
);

pub const BARRIER_DIAMETER: f32 = 0.12;
pub const BARRIER_RADIUS: f32 = 0.5 * BARRIER_DIAMETER;
pub const BARRIER_HEIGHT: f32 = 0.2;

pub const GOAL_WIDTH: f32 = 1.0;
pub const GOAL_HALF_WIDTH: f32 = 0.5 * GOAL_WIDTH;
pub const GOAL_PADDLE_START_POSITION: Vec3 = Vec3::new(0.0, 0.05, 0.0);
pub const GOAL_PADDLE_MAX_POSITION_X: f32 =
    GOAL_HALF_WIDTH - BARRIER_RADIUS - PADDLE_HALF_WIDTH;
pub const GOAL_PADDLE_MAX_POSITION_RANGE: RangeInclusive<f32> =
    -GOAL_PADDLE_MAX_POSITION_X..=GOAL_PADDLE_MAX_POSITION_X;

pub const PADDLE_WIDTH: f32 = 0.2;
pub const PADDLE_DEPTH: f32 = 0.1;
pub const PADDLE_HALF_WIDTH: f32 = 0.5 * PADDLE_WIDTH;
pub const PADDLE_HALF_DEPTH: f32 = 0.5 * PADDLE_DEPTH;
pub const PADDLE_SCALE: Vec3 =
    Vec3::new(PADDLE_WIDTH, PADDLE_DEPTH, PADDLE_DEPTH);
pub const PADDLE_CENTER_HIT_AREA_PERCENTAGE: f32 = 0.5;

pub const WALL_DIAMETER: f32 = 0.05;
pub const WALL_HEIGHT: f32 = 0.1;
pub const WALL_RADIUS: f32 = 0.5 * WALL_DIAMETER;
pub const WALL_SCALE: Vec3 =
    Vec3::new(GOAL_WIDTH, WALL_DIAMETER, WALL_DIAMETER);

pub const FADE_PROGRESS_MIN: f32 = 0.0;
pub const FADE_PROGRESS_MAX: f32 = 1.0;
